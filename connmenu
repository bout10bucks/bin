#!/usr/bin/env bash
#ConnMenu the pipemenu interface to connman written in bash for openbox
#wifi_dc85de828967_hidden_managed_ieee8021x
f_helpdoc() {
cat <<EOF
   ConnMenu: An openbox pipe-menu control for connman the "Connection Manager"
   Usage: connmenu [options OR connman commands ]
   Pipe Options
      --main-menu           Print XML for generating the main pipe-menu.

      --essids              Pipe-menu XML for listing networks  
                            list (submenu within the main pipe-menu).

      --tech                Print XML for generating on/off toggles list for
                            compatible networking devices (submenu within the 
                            main menu).
   Command Line Options
      <conmann connect ..>  Executes "connman connect" to the target service
                            and open passkey dialog(Xdialog). This is used to 
                            invoke an passkey window dialog when connecting to
                            a new secure network for the first time.
 
      --help                Print this help text.
EOF
}
f_exec_opts() {
	f_set_dialog() {
		oldIFS="$IFS" ; IFS=$'\n'
		OUTPUT=( $(sed 's_[^a-zA-Z0-9_]_#_g' /tmp/exec_connman_out.tmp) )
		IFS="$oldIFS"
		Y=${#OUTPUT[@]}
		for A in "${OUTPUT[@]}" ; do
	   	[[ -n $X ]] && B=$X
			X="${#A[0]}"
			(( X > B )) || X=$B
		done ;
		(( Y > 6 && Y + 6 ))
		(( X + 6 && X < 30 ))
	}

	f_rmtmp() { [[ -f /tmp/exec_connman_out.tmp ]] && rm /tmp/exec_conman_out.tmp ;}
	f_rmtmp() { [[ -f /tmp/exec_connman_out.tmp ]] && rm /tmp/exec_conman_out.tmp ;}
	f_errorbox() { Xdialog --msgbox "Error: invalid options: $OPTS" 6 40 ;}

	OPTS="$(Xdialog --stdout --inputbox "Enter command-line options for \"connmanctl\"" 6 50)"
	if [[ -n $OPTS ]] ; then
		f_rmtmp
		COMMAND="connmanctl $OPTS" 
		exec $COMMAND > /tmp/exec_connman_out.tmp & 
		wait $!
		E=$?
		(( E = 0 )) ||  f_errorbox && f_rmtmp 
		f_set_dialog	
		wait $! 
		Xdialog --msgbox "$(cat /tmp/exec_connman_out.tmp)" $Y $X
	else
		Xdialog --msgbox "Error: no options specified" 6 40
	fi
}
#################################################################################
f_admin_opts() {
	echo -e "<openbox_pipe_menu>"
	echo -e "\t<item label=\"Restart (ConnMan daemon)\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>gksu systemctl restart connman.service</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "\t<item label=\"Stop\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>'gksu systemctl stop connman.service'</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "\t<item label=\"Start\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>gksu systemctl start connman.service</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "\t<item label=\"Disable\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>gksu systemctl disable connman.service</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "\t<item label=\"Enable\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>'gksu systemctl enable connman.service'</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "</openbox_pipe_menu>"
}
#################################################################################
f_technologies() {
	ON_OFF=( $(connmanctl technologies | grep "Powered" | awk '{print $NF}') )
	NAME=( $(connmanctl technologies | grep "Name" | awk '{print $NF}') )
	TYPE=( $(connmanctl technologies | grep "Type" | awk '{print $NF}') )
#For those 
	echo "<openbox_pipe_menu>"
	N=0
	for X in "${NAME[@]}" ; do
		[[ ${ON_OFF[N]} == False ]] && 	echo -e "\t<item label=\"Turn on $X\">"
		[[ ${ON_OFF[N]} == True ]]  &&	echo -e "\t<item label=\"Turn off $X\">"
     												echo -e "\t\t<action name=\"Execute\">"
		[[ ${ON_OFF[N]} == False ]] &&	echo -e "\t\t\t<command>"connmanctl enable ${TYPE[N]}"</command>"
		[[ ${ON_OFF[N]} == True ]]  && 	echo -e "\t\t\t<command>"connmanctl disable ${TYPE[N]}"</command>"
													echo -e "\t\t</action>"
													echo -e "\t</item>"
		(( N++ ))
	done
	echo "</openbox_pipe_menu>"
	
exit 0
}
################################################################################
#Creates list of networks to connect with via connmanctl
f_networks() {

	f_all_services() { connmanctl services | awk '{print $NF}' ;}
	f_sec_services() { f_all_services | grep "_psk" ; f_all_services | grep "_wep" ;}
	f_unsec_services() { f_all_services | grep "_none" ;}
	f_essids() { 
		TEST_LIST="$(connmanctl services)"
		ERROR=0
		if [[ -n $TEST_LIST ]] ; then
			connmanctl services | awk '{$(NF--)=""; print}' 
		else
			ERROR=1
		fi 
	}
	f_grep_pass() { grep -q "Passphrase" $X/settings ;}
	f_profiled() {
	for X in /var/lib/connman/* ; do
		if [[ -f $X/settings ]] && f_grep_pass ; then
			grep "\[wifi_" $X/settings | sed 's/[^a-z0-9_]//g'
		fi
	done
	}



	#######Populate all main arrays for filtering and final output. ########
	oldIFS="$IFS"
	IFS=$'\n'
		ESSIDS=( $(f_essids) )
		SERVICES=( $(f_all_services) )
		SECURE=( $(f_sec_services) )
		UNSECURE=( $(f_unsec_services) )
	   PROFILED=( $(f_profiled) )

		#Populate comparison array 
		TMP_LIST=( $(for X in "${UNSECURE[@]}" ; do printf "$X\n" ; done ) )
		TMP_LIST+=( $(for X in "${PROFILED[@]}" ; do printf "$X\n" ; done) )
		NET_LIST=( $(for list in "${TMP_LIST[@]}" ; do printf "connmanctl connect $list\n" ; done | sort -u) ) 
	IFS="$oldIFS"
	unset TMP_LIST[@]
	#Get state of the wifi card via connmanctl for the toggle on/off menu button.
	STATE=( $(connmanctl state | awk '{print $NF}') )
	
	N=0 HIDDEN='<hidden>'
	for X in "${ESSIDS[@]}" ; do
		ESSIDS[N]="$(printf "$X\n" | sed -e 's/[<>]//g')"
		(( N++ ))
	done
	
	N=0
	for X in "${SERVICES[@]}" ; do
		A=""
		for Y in "${PROFILED[@]}" ; do
			if [[ $X == $Y ]] ; then
				NET_SERVICES[N]="$X"
				NET[N]="connmanctl connect $X"
				LABEL[N]="${ESSIDS[N]}"
				A="#"
			#	break
			fi
		done
		for Y in "${SECURE[@]}" ; do
			if [[ $X == $Y && -z $A ]] ; then
				NET_SERVICES[N]="$X"
				NET[N]="connmenu connmanctl connect $X" 
				LABEL[N]="${ESSIDS[N]}"
				A="#"
			#	break
			fi
		done
		for Y in "${UNSECURE[@]}" ; do
			if [[ $X == $Y && -z $A ]] ; then
				NET_SERVICES[N]="$X"
				NET[N]="connmanctl connect $X"
				LABEL[N]="${ESSIDS[N]}"
				A="#"
			fi
		done
		(( N++ ))
	done
	###### Generate menu section for network availables. ######
	echo "<openbox_pipe_menu>"
#	if [[ -n ${ESSIDS[0]} ]] && (( EXIT = 0 )) ; then
		X=0
		for NET_NAME in "${ESSIDS[@]}"	; do
			N=0 ; YN=N
			echo -e "\t<item label=\"$NET_NAME\">"
			echo -e "\t\t<action name=\"Execute\">"
			echo -e "\t\t\t<command>"${NET[X]}"</command>"
			echo -e "\t\t</action>"
			echo -e "\t</item>"
			(( X++ ))
		done
#	else 
#		echo -e "\t<separator label=\"No Networks Found\"/>"	
#	fi
	echo "</openbox_pipe_menu>"
exit 0
}
###############################################################################
f_netmenu() {
echo "<openbox_pipe_menu>"
	echo -e "<separator label=\"ConnMan\"/>"
	echo -e "\t<menu execute=\"connmenu --essids\" id=\"essidpipe\" label=\"Networks\"/>"
#Scan button
	echo -e "\t<item label=\"Scan\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>connmanctl scan wifi</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "\t<separator/>"
#Device selection second pipe-menu
	echo -e "\t<menu execute=\"connmenu --tech\" id=\"techpipe\" label=\"Interface\"/>"
	echo -e "\t<menu execute=\"connmenu --advanced\" id=\"advpipe\" label=\"Advanced\"/>"

echo "</openbox_pipe_menu>"
exit 0
}
f_exec_edit() {
	PATH="$5"
	exec $@ > $PATH 
}
#This function still needs a lot of work. Considering exporting an VALUE from a config file to set an editor instead of
#Xdialog --editbox(this method doesn't work as It would have to run as root...
#f_edit_profiles() {
#	N=0
#	for DIR in /var/lib/connman/* ; do
#		if [[ -f $DIR/settings ]] ; then
#			EDIT[N]="connmenu sudo Xdialog --stdout --editbox $DIR/settings 20 85"
#			PROFILE_NAME[N]="$(grep "Name" $DIR/settings | cut -d '=' -f 2)"
#			(( N++ ))
#			
#		fi
#	done
#	N=0
#	echo "<openbox_pipe_menu>"
#	for X in "${PROFILE_NAME[@]}" ; do
#		echo -e "\t<item label=\"$X\">"
#		echo -e "\t\t<action name=\"Execute\">"
#		echo -e "\t\t\t<command>${EDIT[N]}</command>"
#		echo -e "\t\t</action>"
#		echo -e "\t</item>"
#		(( N++ ))
#	done
#	echo "</openbox_pipe_menu>"
#}
f_advanced_menu() {
echo "<openbox_pipe_menu>"
	echo -e "\t<item label=\"Connmanctl options\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>connmenu --exec-opts</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
#Not available in the currently
#  echo -e "\t<menu execute=\"connmenu --edit\" id=\"editpipe\" label=\"Edit Profiles\"/>"
   echo -e "\t<menu execute=\"connmenu --admin\" id=\"adminpipe\" label=\"Admin Options\"/>"
echo "</openbox_pipe_menu>"
}
#No need for a manual loop case statement for processing positional parameters here
#as only the bottom condition has to process above $1 and that is strait forward.
#see the function f_exec_xdialog
[[ $1 == --main-menu ]] && f_netmenu 
[[ $1 == --exec-opts ]] && f_exec_opts 
[[ $1 == --admin ]] && f_admin_opts 
[[ $1 == --advanced ]] && f_advanced_menu 
[[ $1 ==	--essids ]] && f_networks 
[[ $1 ==	--tech ]] && f_technologies 	
[[ $1	==	--help ]] && f_helpdoc 
[[ $1	==	connmanctl ]] && f_exec_xdialog 
#Currently not implemented in this release
#[[ $1 ==	--edit ]] && f_edit_profiles
#[[ $1	==	sudo && $2 == Xdialog ]] && f_exec_edit





